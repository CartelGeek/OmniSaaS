//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  stripeCustomerId  String?
  status            UserStatus         @default(VERIFIED)
  globalRole        String             @default("USER")
  /// @password
  /// @omit
  password          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt()
  organizationRoles OrganizationRole[]
}

/// @@allow('all', true)
model Template {
  id             String        @id() @default(uuid())
  name           String
  description    String?
  category       String?
  type           String?
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  agents         Agent[]       @relation("template")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Agent {
  id                String         @id() @default(uuid())
  name              String
  status            String?
  workingHoursStart String?
  workingHoursEnd   String?
  whatsappQrCode    String?
  templateId        String
  template          Template?      @relation(fields: [templateId], references: [id], name: "template")
  organizationId    String
  organization      Organization?  @relation(fields: [organizationId], references: [id], name: "organization")
  conversations     Conversation[] @relation("agent")
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Conversation {
  id             String   @id() @default(uuid())
  externalUserId String?
  status         String?
  messageCount   Float
  responseTime   Float?
  agentId        String
  agent          Agent?   @relation(fields: [agentId], references: [id], name: "agent")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Integration {
  id             String        @id() @default(uuid())
  type           String?
  config         Json?
  status         String?
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Subscription {
  id                 String        @id() @default(uuid())
  planType           String?
  status             String?
  currentPeriodStart String?
  currentPeriodEnd   String?
  organizationId     String
  organization       Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id               String             @id() @default(uuid())
  name             String
  pictureUrl       String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt()
  roles            OrganizationRole[]
  templates        Template[]         @relation("organization")
  agents           Agent[]            @relation("organization")
  integrations     Integration[]      @relation("organization")
  subscriptions    Subscription[]     @relation("organization")
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}
